version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: video-analytics-postgres
    environment:
      POSTGRES_DB: video_analytics
      POSTGRES_USER: video_analytics
      POSTGRES_PASSWORD: dev_password_change_in_production
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - video-analytics-network

  redis:
    image: redis:7-alpine
    container_name: video-analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - video-analytics-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: video-analytics-kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - video-analytics-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: video-analytics-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - video-analytics-network

  minio:
    image: minio/minio:latest
    container_name: video-analytics-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - video-analytics-network

  # Application Services
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: video-analytics-api-gateway
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgresql://video_analytics:dev_password_change_in_production@postgres:5432/video_analytics
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: your-super-secure-jwt-secret-key-change-in-production
      RUST_LOG: info
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - video-analytics-network

  ingest-service:
    build:
      context: ./ingest-service
      dockerfile: Dockerfile
    container_name: video-analytics-ingest
    ports:
      - "8081:8081"
      - "8554:8554"  # RTSP
    environment:
      API_GATEWAY_URL: http://api-gateway:8080
      KAFKA_BROKERS: kafka:9092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      RUST_LOG: info
    depends_on:
      - api-gateway
      - kafka
      - minio
    networks:
      - video-analytics-network

  inference-service:
    build:
      context: ./inference-service
      dockerfile: Dockerfile
    container_name: video-analytics-inference
    ports:
      - "8082:8082"
    environment:
      KAFKA_BROKERS: kafka:9092
      MODEL_PATH: /app/models
      GPU_ENABLED: "false"  # Set to true for GPU support
    volumes:
      - ./models:/app/models
    depends_on:
      - kafka
    networks:
      - video-analytics-network
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  analytics-engine:
    build:
      context: ./analytics-engine
      dockerfile: Dockerfile
    container_name: video-analytics-analytics
    ports:
      - "8083:8083"
    environment:
      DATABASE_URL: postgresql://video_analytics:dev_password_change_in_production@postgres:5432/video_analytics
      KAFKA_BROKERS: kafka:9092
      RUST_LOG: info
    depends_on:
      - postgres
      - kafka
    networks:
      - video-analytics-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: video-analytics-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_WS_URL: ws://localhost:8080/ws
    depends_on:
      - api-gateway
    networks:
      - video-analytics-network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  video-analytics-network:
    driver: bridge 